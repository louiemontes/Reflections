What happens when you initialize a repository? Why do you need to do it?

    By viewing a diff between two version of a file I was helped finding a bug by being allowed to see only the changes and focus on what might have went wrong, like how a horse with blinders on its head focuses only the race course or army its about to charge into.  

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is different from the working directory because it is the space Git makes to prepare files for adding to a repository while the working directory is just where source code is located and has nothing ever tracked in it by Git.  The staging area is different from the repository because the repository has files in it that are all saved via the checkpoints of commits or a commit while the staging area only prepares files to possibly be included in this kind of tracking.   

How can you use the staging area to make sure you have one commit per logical
change?

    You can use the staging area to make sure you have one commit per logical change by reading what is prepared to be committed e.g. what is green, so if too many greens are present the question should arise in one's head that perhaps a commit is too big since it changes many files.  

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Situations in which branches would be helpful in keeping your history organized would be in adding a new feature to product, adding a new foreign language to a product's UI, or working collaboratively on a company project like PageNodes.  Branches would help you to be daring in making changes and help you orient yourself to exactly what product version you're working on.  "[Anytime you're building something different, a context change]" - Mike Wales @ Udacity. Production quality branch is the main one.  
How do the diagrams help you visualize the branch structure?

    Diagrams help you visualize the branch structure by delivering orientation.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result of merging two branches together is to create one new combined branch and the teachers represent the merge in the diagram like so to show a joining of two branches and continuing from there.    

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    The pros of using automatic merging is quickness and ballsiness,while merging manually is more likely to lead to a working product.  The cons of automatic merging is replacing parts of a code stack with bad functionality over good functionality from another contributer, and the con of using manual merging over automatic merging is perhaps choosing the wrong code replacement for something. 